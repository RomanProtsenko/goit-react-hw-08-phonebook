{"version":3,"file":"static/js/138.1ef76265.chunk.js","mappings":"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","sources":["components/ContactEditor/ContactEditor.styled.jsx","redux/contacts/selectors.js","hooks/useContacts.js","components/ContactEditor/ContactEditor.jsx","redux/filter/selectors.js","components/ContactsList/ContactsList.styled.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  margin-top: 28px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 24px;\n`;\n\nconst Label = styled.label`\n  font-size: 20px;\n  line-height: 24px;\n`;\n\nconst Input = styled.input`\n  padding-top: 16px;\n  padding-bottom: 16px;\n  padding-left: 16px;\n\n  font-size: 16px;\n  line-height: 20px;\n\n  outline: none;\n  border-radius: 16px;\n  border: 1px solid black;\n`;\n\nconst Button = styled.button`\n  padding: 8px 16px;\n\n  color: black;\n  background-color: transparent;\n  border-radius: 8px;\n  border: 1px solid black;\n\n  transition: color 250ms ease-out, background-color 250ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n  }\n`;\n\nexport { Form, Label, Input, Button };","export const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;","import { useSelector } from 'react-redux';\nimport { selectContacts, selectError } from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  return {\n    contacts,\n    error,\n  };\n};","import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Form, Label, Input, Button } from './ContactEditor.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { useContacts } from 'hooks/useContacts';\n\nconst ContactEditor = () => {\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const { contacts } = useContacts();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [contacts]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n\n    setIsLoading(true);\n    const isInContacts = contacts.find(\n      ({ name }) => name.toLowerCase() === form.name.value.toLowerCase()\n    );\n\n    if (isInContacts) return alert(`${form.name.value} is already in contacts`);\n\n    dispatch(\n      addContact({\n        id: nanoid(),\n        name: form.name.value,\n        number: form.number.value,\n      })\n    );\n\n    e.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={nameId}>Name</Label>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        id={nameId}\n      />\n\n      <Label htmlFor={numberId}>Number</Label>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        id={numberId}\n      />\n\n      <Button type=\"submit\">{isLoading ? `Adding...` : `Add contact`}</Button>\n    </Form>\n  );\n};\n\nexport default ContactEditor;","export const selectFilter = state => state.filter;","import styled from '@emotion/styled';\n\nconst List = styled.ul`\n  margin-top: 24px;\n  padding: 0 200px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst Item = styled.li`\n  padding-bottom: 16px;\n\n  display: flex;\n  align-items: center;\n  gap: 32px;\n\n  border-bottom: 1px solid black;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 8px 16px;\n  margin-left: auto;\n\n  color: black;\n  background-color: transparent;\n  border-radius: 8px;\n  border: 1px solid black;\n\n  transition: color 250ms ease-out, background-color 250ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n  }\n`;\n\nconst EmptyContacts = styled.p`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport { List, Item, Button, EmptyContacts };","import styled from '@emotion/styled';\n\nconst Item = styled.li`\n  padding-bottom: 16px;\n\n  display: flex;\n  align-items: center;\n  gap: 32px;\n\n  border-bottom: 1px solid black;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 8px 16px;\n  margin-left: auto;\n\n  color: black;\n  background-color: transparent;\n  border-radius: 8px;\n  border: 1px solid black;\n\n  transition: color 250ms ease-out, background-color 250ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n  }\n`;\n\nexport { Item, Button };","import { useState } from 'react';\nimport { Item, Button } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClick = id => {\n    dispatch(deleteContact(id));\n    setIsLoading(true);\n  };\n\n  return (\n    <Item>\n      <p>{name}</p>\n      <p>{number}</p>\n      <Button type=\"button\" onClick={() => handleClick(id)}>\n        {isLoading ? `Deleting...` : `Delete`}\n      </Button>\n    </Item>\n  );\n};","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n  margin-bottom: 24px;\n\n  display: block;\n\n  font-size: 16px;\n  line-height: 20px;\n`;\n\nconst Input = styled.input`\n  margin-top: 8px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 8px;\n\n  display: block;\n\n  font-size: 12px;\n  line-height: 16px;\n\n  outline: none;\n  border-radius: 16px;\n  border: 1px solid black;\n`;\n\nexport { Label, Input };","import { Label, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/slice';\nimport { selectFilter } from 'redux/filter/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectFilter) ?? '';\n\n  const handleChange = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleChange}\n        value={filter}\n      ></Input>\n    </Label>\n  );\n};\n\nexport default Filter;","import { useContacts } from 'hooks/useContacts';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { List, EmptyContacts } from './ContactsList.styled';\nimport { Contact } from 'components/Contact/Contact';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsList = () => {\n  const { contacts, error } = useContacts();\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter)\n  );\n\n  const shouldShowContacts = contacts.length !== 0;\n  const shouldShowFilteredContatcs = filteredContacts.length !== 0;\n  const shouldShowEmptyContactsMessage =\n    shouldShowContacts || shouldShowFilteredContatcs;\n\n  return (\n    <>\n      {/* {error && <p>{error}</p>} */}\n      {shouldShowContacts ? (\n        <List>\n          <h1>Your Contacts</h1>\n          <Filter />\n          {shouldShowFilteredContatcs &&\n            filteredContacts.map(({ id, name, number }) => (\n              <Contact key={id} id={id} name={name} number={number} />\n            ))}\n        </List>\n      ) : (\n        error && <p>{error}</p>\n      )}\n      {!shouldShowEmptyContactsMessage && (\n        <EmptyContacts>There are no contacts :(</EmptyContacts>\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;","import { useEffect } from 'react';\n\nimport ContactEditor from 'components/ContactEditor/ContactEditor';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default Contacts;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Form","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","Button","_templateObject4","selectContacts","state","contacts","items","selectError","error","useContacts","useSelector","nameId","nanoid","numberId","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","dispatch","useDispatch","useEffect","_jsxs","onSubmit","e","preventDefault","form","target","find","_ref","name","toLowerCase","value","alert","concat","addContact","id","number","reset","children","_jsx","htmlFor","type","pattern","title","required","selectFilter","filter","List","EmptyContacts","Item","Contact","onClick","deleteContact","handleClick","_useSelector","onChange","filterContacts","_useContacts","filteredContacts","includes","shouldShowContacts","length","shouldShowFilteredContatcs","shouldShowEmptyContactsMessage","_Fragment","Filter","map","_ref2","fetchContacts","ContactEditor","ContactsList","size","arguments","undefined","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}