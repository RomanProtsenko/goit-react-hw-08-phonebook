{"version":3,"file":"static/js/719.2b4af099.chunk.js","mappings":"uOAEMA,EAAOC,EAAAA,EAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8JAWlBC,EAAQH,EAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oDAKpBG,EAAQL,EAAAA,EAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,oMAapBK,EAASP,EAAAA,EAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6U,6BCzBfO,EAAa,WACxB,IAAMC,GAAaC,EAAAA,EAAAA,MACbC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MAEbG,GAAWC,EAAAA,EAAAA,MACTC,GAAgBC,EAAAA,EAAAA,KAAhBD,YAgBR,OACEE,EAAAA,EAAAA,MAACnB,EAAI,CAACoB,SAfa,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,cAEfT,GACEU,EAAAA,EAAAA,IAAO,CACLC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,QAGvC,EAGgCG,aAAa,MAAKC,SAAA,EAC9CC,EAAAA,EAAAA,KAAC7B,EAAK,CAAC8B,QAASvB,EAAWqB,SAAC,cAC5BC,EAAAA,EAAAA,KAAC3B,EAAK,CAAC6B,KAAK,OAAOT,KAAK,OAAOU,GAAIzB,KAEnCsB,EAAAA,EAAAA,KAAC7B,EAAK,CAAC8B,QAASrB,EAAQmB,SAAC,WACzBC,EAAAA,EAAAA,KAAC3B,EAAK,CAAC6B,KAAK,QAAQT,KAAK,QAAQU,GAAIvB,KAErCoB,EAAAA,EAAAA,KAAC7B,EAAK,CAAC8B,QAASpB,EAAWkB,SAAC,cAC5BC,EAAAA,EAAAA,KAAC3B,EAAK,CAAC6B,KAAK,WAAWT,KAAK,WAAWU,GAAItB,IAE1CG,IACCgB,EAAAA,EAAAA,KAAA,KAAGI,MAAO,CAAEC,MAAM,MAAQC,UAAU,UAAYP,SAAEf,KAEpDgB,EAAAA,EAAAA,KAACzB,EAAM,CAAC2B,KAAK,SAAQH,SAAC,cAG5B,ECvCA,EAJiB,WACf,OAAOC,EAAAA,EAAAA,KAACvB,EAAU,GACpB,C,wDCHA,IAkBIE,EAAS,WAGX,IAH0B,IAAd4B,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACfL,EAAK,GACLQ,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWP,IAC3CA,KAAQ,CACb,IAAIQ,EAAqB,GAAdJ,EAAMJ,GAEfJ,GADEY,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAEV,CACA,OAAOZ,CACT,C","sources":["components/SignupForm/SignupForm.styled.jsx","components/SignupForm/SignupForm.jsx","pages/Register.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  max-width: 400px;\n  margin-top: 28px;\n  margin-right: auto;\n  margin-left: auto;\n\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\n\nconst Label = styled.label`\n  font-size: 20px;\n  line-height: 24px;\n`;\n\nconst Input = styled.input`\n  padding-top: 16px;\n  padding-bottom: 16px;\n  padding-left: 16px;\n\n  font-size: 16px;\n  line-height: 20px;\n\n  outline: none;\n  border-radius: 16px;\n  border: 1px solid black;\n`;\n\nconst Button = styled.button`\n  max-width: 200px;\n\n  margin: 0 auto;\n  padding: 16px 32px;\n\n  color: black;\n  background-color: transparent;\n  border-radius: 16px;\n  border: 1px solid black;\n\n  transition: color 250ms ease-out, background-color 250ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n  }\n`;\n\nexport { Form, Label, Input, Button };","import { useDispatch } from 'react-redux';\nimport { signUp } from 'redux/auth/operations';\nimport { Button, Form, Input, Label } from './SignupForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useAuth } from 'hooks/useAuth';\n\nexport const SignupForm = () => {\n  const usernameId = nanoid();\n  const emailId = nanoid();\n  const passwordId = nanoid();\n\n  const dispatch = useDispatch();\n  const { signUpError } = useAuth();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n\n    dispatch(\n      signUp({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label htmlFor={usernameId}>Username</Label>\n      <Input type=\"text\" name=\"name\" id={usernameId} />\n\n      <Label htmlFor={emailId}>Email</Label>\n      <Input type=\"email\" name=\"email\" id={emailId} />\n\n      <Label htmlFor={passwordId}>Password</Label>\n      <Input type=\"password\" name=\"password\" id={passwordId} />\n\n      {signUpError && (\n        <p style={{ color: `red`, textAlign: `center` }}>{signUpError}</p>\n      )}\n      <Button type=\"submit\">Sign Up</Button>\n    </Form>\n  );\n};","import { SignupForm } from 'components/SignupForm/SignupForm';\n\nconst Register = () => {\n  return <SignupForm />;\n};\n\nexport default Register;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Form","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","Button","_templateObject4","SignupForm","usernameId","nanoid","emailId","passwordId","dispatch","useDispatch","signUpError","useAuth","_jsxs","onSubmit","e","preventDefault","form","currentTarget","signUp","name","elements","value","email","password","autoComplete","children","_jsx","htmlFor","type","id","style","color","textAlign","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}